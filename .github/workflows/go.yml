name: Go-CI-CD-AWS-ELB
env:
  EB_PACKAGE_BUCKET_NAME: "adv-it-lesson-ga"
  EB_PACKAGE_APPLICATION_NAME: "my-go-app"
  EB_PACKAGE_ENVIRONMENT_NAME: "Mygoapp-env"
  DEPLOY_PACKAGE_NAME: "Mygoapp-${{ github.sha}}.zip"
  AWS_REGION_NAME: "us-east-1"
  AWS_APPLICATION_VERSION: "Ver-${{ github.sha}}.zip"
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  ci_pipeline:
    runs-on: ubuntu-latest
    steps:
      - name: git clone
        uses: actions/checkout@v1
      
      - name: create archive
        run: zip -r ${{ env.DEPLOY_PACKAGE_NAME }} ./ -x *.git*
        
      - name: authenticate AWS    
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_S3_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION_NAME }}
      - name: copy deployment package
        run: aws s3 cp ${{  env.DEPLOY_PACKAGE_NAME }} s3://${{env.EB_PACKAGE_BUCKET_NAME}}/
    
      - name: print happy message
        run: echo "CI Pipeline successfully finished"
  cd_pipeline:
    runs-on: ubuntu-latest
    needs: ci_pipeline
    
    steps:
      - name: authenticate AWS    
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_S3_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION_NAME }}
      - name: creating new Elastic Beanstalk
        run: |
          aws elasticbeanstalk create-application-version \
          --application-name ${{ env.EB_PACKAGE_APPLICATION_NAME }} \
          --source-bundle S3Bucket="${{ env.EB_PACKAGE_BUCKET_NAME }}",S3Key="${{  env.DEPLOY_PACKAGE_NAME }}" \
          --version-label "${{ env.AWS_APPLICATION_VERSION }}" \
          --description "ComminSHA${{ github.sha }}"
      - name: Deploy new Elastic Beanstalk Application version
        run: |
          aws elasticbeanstalk update-environment --environment-name ${{ env.EB_PACKAGE_ENVIRONMENT_NAME }} \
          --versioon-label "${{ env.AWS_APPLICATION_VERSION }}"
          
      - name: print happy message
        run: echo "CD Pipeline successfully finished"
      
